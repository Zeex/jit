cmake_minimum_required(VERSION 2.8)

project(jit)

set(JIT_VERSION_MAJOR  0)
set(JIT_VERSION_MINOR  3)
set(JIT_VERSION_PATCH  1)
set(JIT_VERSION_STRING 0.3.2)

include(CheckIncludeFile)

include_directories(./)
include_directories(./amx)

check_include_file(alloca.h HAVE_ALLOCA_H)
if(HAVE_ALLOCA_H)
	add_definitions(-DHAVE_ALLOCA_H)
endif()
check_include_file(inttypes.h HAVE_INTTYPES_H)
if(HAVE_INTTYPES_H)
	add_definitions(-DHAVE_INTTYPES_H)
endif()
check_include_file(malloc.h HAVE_MALLOC_H)
if(HAVE_MALLOC_H)
	add_definitions(-DHAVE_MALLOC_H)
endif()
check_include_file(stdint.h HAVE_STDINT_H)
if(HAVE_STDINT_H)
	add_definitions(-DHAVE_STDINT_H)
endif()

set(ASMJIT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/AsmJit)
set(ASMJIT_BUILD_LIBRARY TRUE)
add_definitions(-DASMJIT_API=)
include_directories(${ASMJIT_DIR})
add_subdirectory(AsmJit)

add_library(jit MODULE
	amx/amx.h
	amx/getch.h
	amx/sclinux.h
	amxplugin.cpp
	configreader.cpp
	configreader.h
	jit.cpp
	jit.h
	jump-x86.cpp
	jump-x86.h
	plugin.cpp
	plugin.h
	plugin.rc
	plugincommon.h
)

target_link_libraries(jit AsmJit)

if(CMAKE_COMPILER_IS_GNUCXX)
	list(APPEND COMPILE_FLAGS 
		-m32 
		-Wno-attributes
	)
	list(APPEND LINK_FLAGS
		-m32
	)
	if(MINGW)
		list(APPEND LINK_FLAGS -Wl,--kill-at,--enable-stdcall-fixup)
	endif()
elseif(MSVC)
	list(APPEND LINK_FLAGS "/DEF:${jit_SOURCE_DIR}/plugin.def")
endif()

foreach(flag ${COMPILE_FLAGS})
	set(COMPILE_FLAGS_ "${COMPILE_FLAGS_} ${flag}")
endforeach()
foreach(flag ${LINK_FLAGS})
	set(LINK_FLAGS_ "${LINK_FLAGS_} ${flag}")
endforeach()

set_target_properties(jit PROPERTIES
	PREFIX        ""
	COMPILE_FLAGS ${COMPILE_FLAGS_}
	LINK_FLAGS    ${LINK_FLAGS_}
)

file(WRITE "pluginversion.h" 
"/* This file is generated by CMake */
#define PLUGIN_VERSION_MAJOR  ${JIT_VERSION_MAJOR}
#define PLUGIN_VERSION_MINOR  ${JIT_VERSION_MINOR}
#define PLUGIN_VERSION_PATCH  ${JIT_VERSION_PATCH}
#define PLUGIN_VERSION_STRING \"${JIT_VERSION_STRING}\"
")

install(TARGETS jit LIBRARY DESTINATION ".")
install(FILES README.txt DESTINATION ".")

if(MSVC)
	set(PDB_NAME "jit.pdb")
	set(PDB_PATH "${CMAKE_CURRENT_BINARY_DIR}/\${CMAKE_INSTALL_CONFIG_NAME}/${PDB_NAME}")
	install(FILES ${PDB_PATH} DESTINATION ".")
endif()

set(CPACK_PACKAGE_NAME ${CMAKE_PROJECT_NAME})
if(WIN32)
	set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${JIT_VERSION_STRING}-win32")
	set(CPACK_GENERATOR ZIP)
elseif(UNIX)
	set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${JIT_VERSION_STRING}-linux")
	set(CPACK_GENERATOR TGZ)
endif()

include(CPack)
